{"version":3,"sources":["BooksAPI.ts","Book.tsx","Library.tsx","icons/find.svg","SearchBooks.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Book","book","updateShelves","className","style","width","height","backgroundImage","imageLinks","thumbnail","value","shelf","onChange","event","target","disabled","title","authors","Library","books","booksByShelf","reduce","acc","obj","push","wantToRead","currentlyReading","read","map","id","to","SearchBooks","booksOnShelf","useState","setBooks","query","setQuery","debouncedSearchTerm","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","fetch","method","body","JSON","stringify","then","res","json","data","booksAPI","error","shelvedBooks","type","placeholder","trim","length","src","find","alt","App","shelves","b","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.56bdd944.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId: string) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = (): Promise<book[]> =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book: book, shelf: shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query: string): Promise<Omit<book, shelf>[] & { error: string }> =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react';\n\nconst Book: React.FC<{ book: book, updateShelves: (book: book, shelf: shelf) => void }> = ({ book, updateShelves }) => {\n\n\tconst handleShelving = (event: React.ChangeEvent<HTMLSelectElement>) => {\n\t\tconst shelf = event.target.value as shelf;\n\t\tupdateShelves(book, shelf);\n\t}\n\n\treturn (\n\t\t<li>\n\t\t\t<div className=\"book\">\n\t\t\t\t<div className=\"book-top\">\n\t\t\t\t\t<div className=\"book-cover\" style={{\n\t\t\t\t\t\twidth: 128, height: 193, backgroundImage: ((book) => {\n\t\t\t\t\t\t\tif (book.imageLinks) {\n\t\t\t\t\t\t\t\treturn (`url(${book.imageLinks.thumbnail})`)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})(book)\n\t\t\t\t\t}}></div>\n\t\t\t\t\t<div className=\"book-shelf-changer\">\n\t\t\t\t\t\t<select value={book.shelf || 'none'} onChange={handleShelving}>\n\t\t\t\t\t\t\t<option value=\"none\" disabled>Move to...</option>\n\t\t\t\t\t\t\t<option value=\"currentlyReading\">Currently Reading</option>\n\t\t\t\t\t\t\t<option value=\"wantToRead\">Want to Read</option>\n\t\t\t\t\t\t\t<option value=\"read\">Read</option>\n\t\t\t\t\t\t\t<option value=\"none\">None</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"book-title\">{book.title}</div>\n\t\t\t\t<div className=\"book-authors\">{book.authors}</div>\n\t\t\t</div>\n\t\t</li>)\n}\n\nexport default Book;","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport Book from './Book'\n\nconst Library: React.FC<{ books: book[], updateShelves: (book: book, shelf: shelf) => void }> = ({ books, updateShelves }) => {\n\tconst booksByShelf = books.reduce<{ [key in shelf]: book[] }>(function (acc, obj) {\n\t\tlet key = obj.shelf\n\t\tacc[key].push(obj)\n\t\treturn acc\n\t}, { wantToRead: [], currentlyReading: [], read: [], })\n\n\treturn (\n\t\t<div className=\"list-books\">\n\t\t\t<div className=\"list-books-title\">\n\t\t\t\t<h1>MyReads</h1>\n\t\t\t</div>\n\t\t\t<div className=\"list-books-content\">\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"bookshelf\">\n\t\t\t\t\t\t<h2 className=\"bookshelf-title\">Currently Reading</h2>\n\t\t\t\t\t\t<div className=\"bookshelf-books\">\n\t\t\t\t\t\t\t<ol className=\"books-grid\">{booksByShelf.currentlyReading.map(book => <Book key={book.id} book={book} updateShelves={updateShelves} />)}</ol>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bookshelf\">\n\t\t\t\t\t\t<h2 className=\"bookshelf-title\">Want to Read</h2>\n\t\t\t\t\t\t<div className=\"bookshelf-books\">\n\t\t\t\t\t\t\t<ol className=\"books-grid\">{booksByShelf.wantToRead.map(book => <Book key={book.id} book={book} updateShelves={updateShelves} />)}</ol>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bookshelf\">\n\t\t\t\t\t\t<h2 className=\"bookshelf-title\">Read</h2>\n\t\t\t\t\t\t<div className=\"bookshelf-books\">\n\t\t\t\t\t\t\t<ol className=\"books-grid\">{booksByShelf.read.map(book => <Book key={book.id} book={book} updateShelves={updateShelves} />)}</ol>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"open-search\">\n\t\t\t\t<Link className=\"open-search\" to='/search'>Add a book</Link>\n\t\t\t</div>\n\t\t</div>)\n}\n\nexport default Library;","export default __webpack_public_path__ + \"static/media/find.ff8aa13f.svg\";","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport * as booksAPI from './BooksAPI'\nimport Book from './Book'\nimport find from './icons/find.svg';\n\nconst SearchBooks: React.FC<{ booksOnShelf: { [key: string]: shelf }, updateShelves: (book: book, shelf: shelf) => void }> = ({ booksOnShelf, updateShelves }) => {\n  const [books, setBooks] = useState<book[]>([]);\n  const [query, setQuery] = useState(\"\");\n\n  const debouncedSearchTerm = useDebounce(query);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value.trim());\n  }\n\n  // Effect for API call\n  useEffect(\n    () => {\n      if (debouncedSearchTerm) {\n        booksAPI.search(debouncedSearchTerm).then((books) => {\n          if (!books.error) {\n            const shelvedBooks = books.map(book => ({ ...book, shelf: booksOnShelf[book.id] }))\n            setBooks(shelvedBooks);\n          } else { setBooks([]) }\n        })\n      } else { setBooks([]) }\n    },\n    [debouncedSearchTerm, booksOnShelf] // Only call effect if debounced search term changes\n  );\n\n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <Link className=\"close-search\" to='/'>Close</Link>\n        <div className=\"search-books-input-wrapper\">\n          <input type=\"text\" placeholder=\"Search by title or author\" value={query} onChange={handleChange} />\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <ol className=\"books-grid\">\n          { books.length > 0 ? books.map(book => <Book key={book.id} book={book} updateShelves={updateShelves} />) :\n          <li className=\"books-empty\"><img src={find} alt=\"no result\" /><p>no result</p></li>}\n        </ol>\n      </div>\n    </div>\n  )\n}\n\nfunction useDebounce(value: any, delay = 300) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n}\n\nexport default SearchBooks\n","import React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport './App.css';\nimport * as booksAPI from './BooksAPI'\nimport Library from './Library';\nimport SearchBooks from './SearchBooks';\n\nfunction App() {\n  const [books, setBooks] = useState<book[]>([]);\n\n  useEffect(() => {\n    booksAPI.getAll().then(books => setBooks(books))\n  }, []);\n\n  const updateShelves = (book: book, shelf: shelf) => {\n    booksAPI.update(book, shelf).then((shelves) => {\n      setBooks(books.map(b => b.id === book.id ? { ...b, shelf } : b))\n    })\n  }\n\n  const booksOnShelf = books.reduce<{ [key: string]: shelf }>((acc, obj) => { acc[obj.id] = obj.shelf; return acc }, {})\n\n  return (\n    <div className=\"app\" >\n      <Route exact path='/'>\n        <Library books={books} updateShelves={updateShelves} />\n      </Route>\n      <Route path='/search'>\n        <SearchBooks booksOnShelf={booksOnShelf} updateShelves={updateShelves} />\n      </Route>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/myreads\"><App /></BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}